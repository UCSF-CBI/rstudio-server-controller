#!/usr/bin/env bash
### freeport: Find A Free Port
### 
### Gets a port in [<min>,<max] that is available using one of serveral
### methods for scanning ports until a free one is found.
###
### If a free port is found, the port is outputted with exit code 0.
### If no free port is found, then -1 is outputted with exist code 1.
###
### Usage:
###  freeport [options]
### 
### Options: 
###  --help             Display the full help page with examples
###  --version          Output version of this software
###  --debug            Output detailed debug information
###
###  --min=<min>        Minimum port number considered (Default: 1024)
###  --max=<max>        Maximum port number considered (Default: 65535)
###  --method=<mth>     Method use to find a port among {<min>, ..., <max>}.
###                     If 'order', then the ports are scanned in order. If
###                     'random', they are scanned in random order
###  --seed=<seed>      Random seed used for --method=random
###  --skip=<idx>       Number of ports to skip before being considered
### ---
###
### Example:
###  freeport --help
###  freeport --version
###
###  # Find a random free port in [1024, 65535]
###  freeport
###  freeport --method=random --min=1024 --max=65535
###
###  # Find a random port using user's ID (UID) as the random seed.
###  # This often finds the same port for the current user, while
###  # lowering the risk for port conflicts with other users. This
###  # is useful on multi-tenant systems, where users need to use
###  # one or more ports.
###  freeport --seed="$(id --user)"
###
###  # Find a UID random port but skip the first proposal to avoid
###  # clashing with above port. This can be used to get different
###  # ports for different applications running at the same time.
###  freeport --seed="$(id --user)" --skip=1
###
###  # Find the first free random port in {11000, 11001, ..., 11999}
###  freeport --min=11000 --max=11999
###
###  # Find the fourth free random port in {11000, 11001, ..., 11999}
###  freeport --min=11000 --max=11999 --skip=3
###
###  # Find the first free port in {11000, 11001, ..., 11999}
###  freeport --method=increasing --min=11000 --max=11999
###
###  # Find the first free port in {11999, 11998, ..., 11000}
###  freeport --method=decreasing --min=11000 --max=11999
###
###  # Find the first free port in {11000, 11001, ..., 11999}, but
###  # skip {11000, ..., 11003}
###  freeport --method=increasing --min=11000 --max=11999 --skip=4
###
###  # Test if port 4321 is free
###  freeport --min=4321 --max=4321 > /dev/null
###  is_free=$?
###
### Requirements:
### * python
###
### Version: 0.0.0-9001
### Copyright: Henrik Bengtsson (2021)
### License: MIT

## Import bash utility functions
incl="${BASH_SOURCE%/*}/incl"

# shellcheck source=incl/asserts.sh
source "${incl}/asserts.sh"
# shellcheck source=incl/cli.sh
source "${incl}/cli.sh"
# shellcheck source=incl/conditions.sh
source "${incl}/conditions.sh"
# shellcheck source=incl/files.sh
source "${incl}/files.sh"
# shellcheck source=incl/output.sh
source "${incl}/output.sh"
# shellcheck source=incl/ports.sh
source "${incl}/ports.sh"


# =========================================================================
# Utility functions
# =========================================================================

# =========================================================================
# MAIN
# -------------------------------------------------------------------------
debug=false
verbose=false
quiet=false

skip=0
min=1024
max=65535
method=random
seed=
args=()

# Parse command-line options
while [[ $# -gt 0 ]]; do
    mdebug "Next CLI argument: $1"

    ## Options (--flags):
    if [[ "$1" == "--help" ]]; then
        action=help
    elif [[ "$1" == "--version" ]]; then
        action=version
    elif [[ "$1" == "--debug" ]]; then
        debug=true
    elif [[ "$1" == "--verbose" ]]; then
        verbose=true
    elif [[ "$1" == "--quiet" ]]; then
        quiet=true
        
    ## Options (--key=value):
    elif [[ "$1" =~ ^--.*=.*$ ]]; then
        key=${1//--}
        key=${key//=*}
        value=${1//--[[:alpha:]]*=}
        mdebug "Key-value option '$1' parsed to key='${key}', value='${value}'"
        if [[ -z ${value} ]]; then
            merror "Option '--${key}' must not be empty"
        fi
        if [[ "${key}" == "method" ]]; then
            method=${value}
        elif [[ "${key}" == "seed" ]]; then
            seed=${value}
        elif [[ "${key}" == "min" ]]; then
            min=${value}
        elif [[ "${key}" == "max" ]]; then
            max=${value}
        elif [[ "${key}" == "skip" ]]; then
            skip=${value}
        else
            merror "Unknown option: $1"
        fi
    ## Additional options to be appended (rarely needed)
    else
        args+=("$1")
    fi
    shift
done


## --help should always be available prior to any validation errors
if [[ $action == "help" ]]; then
    help full
    _exit 0
elif [[ $action == "version" ]]; then
    version
    _exit 0
fi


# -------------------------------------------------------------------------
# Validate options
# -------------------------------------------------------------------------
if [[ -n "${seed}" ]]; then
    assert_integer "${seed}"
fi

assert_integer "${skip}"
assert_port "${min}"
if [[ "${max}" == "min" ]]; then
    max=${min}
fi
assert_port "${max}"

if port=$(free_random_port "${seed}" "${method}" "${skip}" "${min}" "${max}"); then
    echo "${port}"
else
    error "Failed to find a free port"
fi

