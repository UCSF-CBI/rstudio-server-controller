#! /usr/bin/env bash
## Usage:
## echo <password> | auth-via-su <username>
##
## Description:
## Validates the password on standard input for the user
## specified as the first argument
## 
## Requires:
## * expect (https://www.nist.gov/services-resources/software/expect)
## * ssh
##
## Author: Henrik Bengtsson (2021-2023)
set -o nounset

function debug() {
    if [[ -z ${RSC_AUTH_LOGFILE:-} ]]; then
	echo "$@"
    else
	echo "$@" >> "${RSC_AUTH_LOGFILE}"
    fi
}

# Confirm username is supplied
if [[ $# -lt 1 ]]; then
    debug "Usage: $(basename "$0") <username>"
    exit 1
fi
RSC_USERNAME=${1}

if [[ "${RSC_USERNAME}" != "${USER}" ]]; then
    debug "Invalid authentication (incorrect username)"
    exit 1
fi

if command -v expect &> /dev/null; then
    debug "  Using 'expect' to validate password:"
    debug "  Reading password from standard input"

    ## Read password from standard input
    IFS='' read -r password

    # Escape all dollar symbols ('$')
    password="${password//\$/\\$}"
    
    ## WORKAROUND: Not all 'su' versions support being called
    ## from within a script. Because of this, we use expect'
    ## to trick it, it's doing so.  This workaround was adopted
    ## from https://stackoverflow.com/a/1503831/1072091
    command expect <<EOF
eval spawn su "$USER" -c exit
expect "Password"
send -- "${password}\n"
set wait_result  [wait]
## check if it is an OS error or a return code from our command
## index 2 should be -1 for OS error, 0 for command return code
if {[lindex \$wait_result 2] == 0} {
    exit [lindex \$wait_result 3]
} 
else {
    exit 1 
}
EOF
    valid=$?
else
    debug "Using 'su' to validate password"
    su "$USER" -c exit
    valid=$?
fi

if [[ ! "${valid}" -eq 0 ]]; then
    debug "Invalid authentication (incorrect password)"
    exit 1
fi

debug "Successful authentication"
exit 0
