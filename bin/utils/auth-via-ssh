#! /usr/bin/env bash
## Usage:
## echo <password> | RSC_AUTH_SSH_HOST=<hostname> auth-via-ssh <username>
## echo <password> | auth-via-ssh <username> <hostname>
##
## Description:
## Validates the password on standard input for the user
## specified as the first argument
##
## Requires:
## * expect (https://www.nist.gov/services-resources/software/expect)
## * ssh
##
## Author: Henrik Bengtsson (2021)
set -o nounset

if ! command -v expect &> /dev/null; then
    debug "ERROR: $0 requires 'expect'"
    echo >&2 "ERROR: $0 requires 'expect'"
    exit 2
fi    

function debug() {
    if [[ -z ${RSC_AUTH_LOGFILE:-} ]]; then
	echo "$@"
    else
	echo "$@" >> "${RSC_AUTH_LOGFILE}"
    fi
}


# Confirm username is supplied
if [[ $# -lt 1 ]]; then
    debug "Usage: $(basename "$0") <username>"
    exit 1
fi
RSC_USERNAME="${1}"

# Confirm SSH host is supplied
RSC_AUTH_SSH_HOST=${RSC_AUTH_SSH_HOST:-${2:-}}
if [[ -z ${RSC_AUTH_SSH_HOST} ]]; then
    debug "ERROR: $0 requires RSC_AUTH_SSH_HOST"
    exit 2
fi

if [[ "${RSC_USERNAME}" != "${USER}" ]]; then
    debug "Invalid authentication (incorrect username)"
    exit 1
fi

## Read password from standard input
IFS='' read -r password

command expect <<EOF
eval spawn ssh -o PreferredAuthentications=password -o NumberOfPasswordPrompts=1 -l "$USER" "${RSC_AUTH_SSH_HOST}" "echo true"
expect "password"
send "${password}\n"
set wait_result  [wait]
## check if it is an OS error or a return code from our command
## index 2 should be -1 for OS error, 0 for command return code
if {[lindex \$wait_result 2] == 0} {
    exit [lindex \$wait_result 3]
} 
else {
    exit 1 
}
EOF
valid=$?

if [[ ! "${valid}" -eq 0 ]]; then
    debug "Invalid authentication (incorrect password)"
    exit 1
fi

debug "Successful authentication"
exit 0
